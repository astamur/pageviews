version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    restart: always

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    restart: always
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    restart: always

  kafka-actualizer:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    volumes:
      - ./docker/wait-for-it.sh:/wait-for-it.sh
    command: |
      bash -c './wait-for-it.sh --timeout=0 -s kafka:9092 && \
      kafka-topics --create --topic users --partitions 8 --replication-factor 1 --zookeeper zookeeper:2181 && \
      kafka-topics --create --topic pageviews --partitions 8 --replication-factor 1 --zookeeper zookeeper:2181 && \
      kafka-topics --create --topic top-pages --partitions 8 --replication-factor 1 --zookeeper zookeeper:2181 && \
      exit 0'
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    depends_on:
      - kafka

  connect:
    image: cnfldemos/kafka-connect-datagen:${DATAGEN_VERSION}
    depends_on:
      - kafka-actualizer
      - schema-registry
    ports:
      - 8083:8083
    volumes:
      - ./src/main/resources/avro:/avro
    environment:
      CONNECT_GROUP_ID: 1
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    restart: always

#  kafka-rest-proxy:
#    image: confluentinc/cp-kafka-rest:${CONFLUENT_VERSION}
#    hostname: kafka-rest-proxy
#    depends_on:
#      - zookeeper
#      - kafka
#      - schema-registry
#    ports:
#      - 8082:8082
#    environment:
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
#      KAFKA_REST_LISTENERS: "http://kafka-rest-proxy:8082"
#      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
#      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#
#  kafka-topics-ui:
#    image: landoop/kafka-topics-ui:latest
#    depends_on:
#      - kafka-rest-proxy
#    ports:
#      - 8000:8000
#    environment:
#      KAFKA_REST_PROXY_URL: "kafka-rest-proxy:8082"
#      PROXY: "true"

  curl:
    image: tutum/curl
    depends_on:
      - connect
    volumes:
      - ./docker/curl:/opt
    command: bash -c '/opt/start.sh'

  pageviews:
    image: astamur/pageviews:0.0.1
    depends_on:
      - curl
    command:
      - "--pageviews.bootstrapServers=kafka:9092"
      - "--pageviews.schemaRegistryUrl=http://schema-registry:8081"
    restart: always